
services:
  frontend:
    build: ./frontend
    ports:
      - "80:80"
    depends_on:
      - orquestador
    networks:
      - app_network
    environment:
      - VITE_API_BASE_URL=http://orquestador:5000/api


  orquestador:
    build: ./orquestador
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy  # Esperar a que PostgreSQL pase el healthcheck
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: Heroofgold03Sql
      DB_NAME: GESTOR_ELECTRIC
      NODE_ENV: development
      PORTAL_SERVICE_URL: http://portal:5100
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5


  autenticacion:
    build: ./servicios/autenticacion
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy  # Esperar a que PostgreSQL pase el healthcheck
    environment:
      DATABASE_URL: postgres://postgres:Heroofgold03Sql@postgres:5432/GESTOR_ELECTRIC
    networks:
      - app_network

  portal:
    build: ./servicios/portal
    ports:
      - "5100:5100"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: Heroofgold03Sql
      DB_NAME: GESTOR_ELECTRIC
      NODE_ENV: development
    volumes:
      - ./servicios/portal:/app
      - /app/node_modules
    networks:
      - app_network

  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Heroofgold03Sql
      POSTGRES_DB: 'GESTOR_ELECTRIC'
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:   # <---- SE AGREGA ESTO
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  pgdata:

networks:
  app_network:
    driver: bridge
