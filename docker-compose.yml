<<<<<<< HEAD

=======
>>>>>>> ronald
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app_network
    environment:
      - VITE_API_BASE_URL=/api

  orquestador:
    build: ./orquestador
    ports:
      - "5000:5000"
    depends_on:
<<<<<<< HEAD
      postgres_db:
        condition: service_healthy
      portal:
        condition: service_started
    environment:
      DB_HOST: postgres_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 123456
      DB_NAME: gestor_nuevo
      NODE_ENV: development
      PORTAL_SERVICE_URL: http://portal:5100
=======
      postgres:
        condition: service_healthy   # Espera a que PostgreSQL pase el healthcheck
    environment:
      DB_HOST: postgres              # Usa el nombre del servicio como host
      DB_PORT: 5432
      DB_USER: root
      DB_PASSWORD: 'admin'
      DB_NAME: 'gestor_nuevo'
>>>>>>> ronald
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]  # Probamos con el endpoint principal
      interval: 10s
      timeout: 5s
      retries: 5

  autenticacion:
    build: ./servicios/autenticacion
    ports:
      - "5001:5001"
    depends_on:
<<<<<<< HEAD
      postgres_db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:123456@postgres_db:5432/gestor_nuevo
=======
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://root:admin@postgres:5432/gestor_nuevo
>>>>>>> ronald
    networks:
      - app_network

  portal:
    build: ./servicios/portal
    ports:
      - "5100:5100"
    environment:
      DB_HOST: postgres_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 123456
      DB_NAME: gestor_nuevo
      NODE_ENV: development
    volumes:
      - ./servicios/portal:/app
      - /app/node_modules
    networks:
      - app_network
    depends_on:
      - postgres_db
  temas:
    build: ./servicios/temas
    ports:
      - "5200:5200"
    environment:
      DB_HOST: postgres_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 123456
      DB_NAME: gestor_nuevo
    networks:
      - app_network
    depends_on:
      - postgres_db
      
  postgres_db:
    image: postgres:15
    restart: always
<<<<<<< HEAD
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: gestor_nuevo
=======
>>>>>>> ronald
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 'admin'
      POSTGRES_DB: 'gestor_nuevo'
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
<<<<<<< HEAD
      test: ["CMD-SHELL", "pg_isready -U postgres"]
=======
      test: ["CMD-SHELL", "pg_isready -U root -d gestor_nuevo"]
>>>>>>> ronald
      interval: 10s
      timeout: 5s
<<<<<<< HEAD
      
=======
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
    ports:
      - "8080:80"         # Ahora pgAdmin se expone en el puerto 8080 en el host
    depends_on:
      - postgres
    networks:
      - app_network
>>>>>>> ronald

volumes:
  pgdata:

networks:
<<<<<<< HEAD
  app_network:
    driver: bridge
=======
  app_network:
>>>>>>> ronald
